// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Akun {
  id            String        @id @default(uuid())
  username      String        @unique @db.VarChar(100)
  password      String        @db.VarChar(100)
  nama          String        @db.VarChar(255)
  created_at    DateTime      @default(now())

  panitia       Panitia?
  mentee        Mentee?
  sponsor       Sponsor?
  pembicara     Pembicara?

  @@map("akun")
}

model Panitia {
  @@map("panitia")

  username      String        @id
  fakultas      String        @db.VarChar(50)
  jurusan       String        @db.VarChar(50)
  angkatan      Int           @db.SmallInt
  divisi_pi_id  String?       @unique
  divisi_bph_id String?
  jabatan       TipeJabatan   @default(STAFF)

  hadirRapatBPH PanitiaRapatBPH[]

  kelompokOKK   KelompokOKK?
  
  akun          Akun          @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  divisi_pi      DivisiPI?     @relation(fields: [divisi_pi_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  divisi_bph     DivisiBPH?    @relation(fields: [divisi_bph_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum TipeJabatan {
  @@map("tipe_jabatan")
  PENGURUS_INTI

  PJ
  WA_PJ1
  WA_PJ2
  STAFF
}

model DivisiPI {
  @@map("divisi_pi")

  id            String        @id @default(uuid())
  nama          String        @unique @db.VarChar(50)
  pengurus      Panitia?

  divisiKoor    DivisiBPH[]
}

model DivisiBPH {
  @@map("divisi_bph")

  id            String        @id @default(uuid())
  nama          String        @unique @db.VarChar(50)
  divisi_bagian String        
  panitia       Panitia[]
  rapat_bph     RapatBPH[]

  divisi_pi     DivisiPI?      @relation(fields: [divisi_bagian], references: [nama], onDelete: Cascade, onUpdate: Cascade)
}

model RapatBPH {
  @@map("rapat_bph")

  id            String        @default(uuid())
  waktu         DateTime      @db.Timestamp()
  tempat        String        @db.VarChar(255)
  kesimpulan    String        @db.Text
  divisi_bph_id String
  panitia_hadir PanitiaRapatBPH[]

  @@id([divisi_bph_id, id])
  divisiBPH     DivisiBPH     @relation(fields: [divisi_bph_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PanitiaRapatBPH {
  @@map("panitia_rapat_bph")

  rapat_id          String   @db.VarChar(100)
  panitia_username  String   @db.VarChar(100)
  waktu_hadir       DateTime @db.Timestamp()
  waktu_rapat       DateTime @db.Timestamp()
  divisi_bph_id     String 

  panitia        Panitia  @relation(fields: [panitia_username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  rapatBPH       RapatBPH @relation(fields: [rapat_id, divisi_bph_id], references: [id, divisi_bph_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([panitia_username, divisi_bph_id, rapat_id])
}

model KelompokOKK {
  @@map("kelompok_okk")

  id              String        @id @default(uuid())
  no              Int           @unique @db.SmallInt
  anggota         Mentee[]

  username_mentor String        @unique
  mentoring       Mentoring[]

  mentor          Panitia       @relation(fields: [username_mentor], references: [username], onDelete: Cascade, onUpdate: Cascade)
}

model Mentee {
  @@map("mentee")

  username        String        @id @default(uuid())
  fakultas        String        @db.VarChar(50)
  jurusan         String        @db.VarChar(50)
  angkatan        Int           @db.SmallInt
  no_kelompok_okk Int           @db.SmallInt

  hadirMentoring MenteeMentoring[]

  akun          Akun          @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  kelompokOKK   KelompokOKK   @relation(fields: [no_kelompok_okk], references: [no], onDelete: Cascade, onUpdate: Cascade)
}

model Mentoring {
  @@map("mentoring")

  id              String        @default(uuid())
  waktu           DateTime      @db.Timestamp()
  tempat          String        @db.VarChar(255)
  materi          String        @db.Text
  no_kelompok     Int           @db.SmallInt
  mentee_hadir    MenteeMentoring[]

  kelompok_okk     KelompokOKK   @relation(fields: [no_kelompok], references: [no], onDelete: Cascade, onUpdate: Cascade)

  @@id([no_kelompok, id])
}

model MenteeMentoring {
  @@map("mentee_mentoring")

  mentoring_id     String   @db.VarChar(100)
  mentee_username  String   @db.VarChar(100)
  waktu_hadir      DateTime @db.Timestamp()
  waktu_mentoring  DateTime @db.Timestamp()
  no_kelompok      Int

  mentee        Mentee    @relation(fields: [mentee_username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  mentoring     Mentoring @relation(fields: [mentoring_id, no_kelompok], references: [id, no_kelompok], onDelete: Cascade, onUpdate: Cascade)

  @@id([mentee_username, mentoring_id, no_kelompok])
}

model Acara {
  @@map("acara")

  id            String        @id @default(uuid())
  nama          String        @db.VarChar(100)
  waktu_mulai   DateTime      @db.Timestamp()
  waktu_selesai DateTime      @db.Timestamp()
  tempat        String        @db.VarChar(255)
  deskripsi     String

  sponsor      AcaraSponsor[]
  pembicara    AcaraPembicara[]
}

model Sponsor {
  @@map("sponsor")

  username     String        @id @db.VarChar(100)
  kontak       String        @db.VarChar(100)

  acara        AcaraSponsor[]

  akun         Akun          @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
}

model AcaraSponsor {
  @@map("acara_sponsor")

  id_acara      String       @db.VarChar(100)
  id_sponsor    String       @db.VarChar(100)
  paket         PaketSponsor   

  acara         Acara        @relation(fields: [id_acara], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sponsor       Sponsor      @relation(fields: [id_sponsor], references: [username], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_acara, id_sponsor])
}

enum PaketSponsor {
  @@map("paket_sponsor")

  GOLD
  SILVER
  BRONZE
}

model Pembicara {
  @@map("pembicara")

  username     String        @id @db.VarChar(100)
  kontak       String        @db.VarChar(100)

  acara        AcaraPembicara[]

  akun         Akun          @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
}

model AcaraPembicara {
  @@map("acara_pembicara")

  id_acara      String        @db.VarChar(100)
  id_pembicara  String        @db.VarChar(100)

  acara        Acara          @relation(fields: [id_acara], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pembicara    Pembicara      @relation(fields: [id_pembicara], references: [username], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_acara, id_pembicara])
}

model RefreshToken {
  @@map("refresh_token")

  idUser       String        @id @default(uuid())
  token        String        @unique
}